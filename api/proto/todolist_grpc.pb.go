// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoListClient is the client API for TodoList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListClient interface {
	GetItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TodoList_GetItemsClient, error)
	PostItem(ctx context.Context, in *PostItemRequest, opts ...grpc.CallOption) (*PostItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
}

type todoListClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListClient(cc grpc.ClientConnInterface) TodoListClient {
	return &todoListClient{cc}
}

func (c *todoListClient) GetItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TodoList_GetItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoList_ServiceDesc.Streams[0], "/todolist.TodoList/GetItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListGetItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoList_GetItemsClient interface {
	Recv() (*GetItemsResponse, error)
	grpc.ClientStream
}

type todoListGetItemsClient struct {
	grpc.ClientStream
}

func (x *todoListGetItemsClient) Recv() (*GetItemsResponse, error) {
	m := new(GetItemsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoListClient) PostItem(ctx context.Context, in *PostItemRequest, opts ...grpc.CallOption) (*PostItemResponse, error) {
	out := new(PostItemResponse)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/PostItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoListServer is the server API for TodoList service.
// All implementations must embed UnimplementedTodoListServer
// for forward compatibility
type TodoListServer interface {
	GetItems(*emptypb.Empty, TodoList_GetItemsServer) error
	PostItem(context.Context, *PostItemRequest) (*PostItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	mustEmbedUnimplementedTodoListServer()
}

// UnimplementedTodoListServer must be embedded to have forward compatible implementations.
type UnimplementedTodoListServer struct {
}

func (UnimplementedTodoListServer) GetItems(*emptypb.Empty, TodoList_GetItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedTodoListServer) PostItem(context.Context, *PostItemRequest) (*PostItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostItem not implemented")
}
func (UnimplementedTodoListServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedTodoListServer) mustEmbedUnimplementedTodoListServer() {}

// UnsafeTodoListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServer will
// result in compilation errors.
type UnsafeTodoListServer interface {
	mustEmbedUnimplementedTodoListServer()
}

func RegisterTodoListServer(s grpc.ServiceRegistrar, srv TodoListServer) {
	s.RegisterService(&TodoList_ServiceDesc, srv)
}

func _TodoList_GetItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoListServer).GetItems(m, &todoListGetItemsServer{stream})
}

type TodoList_GetItemsServer interface {
	Send(*GetItemsResponse) error
	grpc.ServerStream
}

type todoListGetItemsServer struct {
	grpc.ServerStream
}

func (x *todoListGetItemsServer) Send(m *GetItemsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoList_PostItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).PostItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/PostItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).PostItem(ctx, req.(*PostItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoList_ServiceDesc is the grpc.ServiceDesc for TodoList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todolist.TodoList",
	HandlerType: (*TodoListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostItem",
			Handler:    _TodoList_PostItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _TodoList_UpdateItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItems",
			Handler:       _TodoList_GetItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/todolist.proto",
}
